"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class commands_t(object):
    __slots__ = ["timestamp", "mode", "desired_state", "enabled"]

    __typenames__ = ["int64_t", "int16_t", "double", "boolean"]

    __dimensions__ = [None, None, [2], None]

    def __init__(self):
        self.timestamp = 0
        self.mode = 0
        self.desired_state = [ 0.0 for dim0 in range(2) ]
        self.enabled = False

    def encode(self):
        buf = BytesIO()
        buf.write(commands_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qh", self.timestamp, self.mode))
        buf.write(struct.pack('>2d', *self.desired_state[:2]))
        buf.write(struct.pack(">b", self.enabled))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != commands_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return commands_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = commands_t()
        self.timestamp, self.mode = struct.unpack(">qh", buf.read(10))
        self.desired_state = struct.unpack('>2d', buf.read(16))
        self.enabled = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if commands_t in parents: return 0
        tmphash = (0xb222e87731c9468e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if commands_t._packed_fingerprint is None:
            commands_t._packed_fingerprint = struct.pack(">Q", commands_t._get_hash_recursive([]))
        return commands_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", commands_t._get_packed_fingerprint())[0]

